- if @active_subscriptions.present? && (params[:status].present? ? params[:status] == 'active' : true)
  - @active_subscriptions.each do |subscription|
    - billing_policy = subscription.node.billing_policy
    .subscription-contract-products
      - subscription.node.lines.edges.each_with_index do |edge, index|
        - product = ShopifyAPI::Product.find(edge.node.product_id[/\d+/])
        .grid
          .grid-item
            .img.account-img
              img src=product.images.first&.src alt=""
            p.text.active-text
              = product.title
            p.text.active-text
              = "#{number_to_currency edge.node.current_price.amount} / #{billing_policy.interval_count} #{billing_policy.interval}"
          .grid-item
            h4 NEXT CARD CHARGE
            p.text.right.active-text
              = DateTime.parse(subscription.node.next_billing_date).strftime("%a, %B %e")
            p.text.right.active-text
              = number_to_currency (edge.node.current_price.amount.to_f * edge.node.quantity)
          .grid-item
            button.white-btn.action-btn type="button" aria-hidden="true" tabindex="-1" data-action='close' data-toggle="modal" data-target="#swap-#{edge.node.id.split("gid://shopify/SubscriptionLine/")[1]}" SWAP SUBSCRIPTION
            = link_to "/a/chargezen_production/dashboard/upcoming?customer_id=#{params[:customer_id]}&subscription_id=#{subscription.node.id}&line_id=#{edge.node.id}&active_subscriptions_count=#{@active_subscriptions.count}" do
              button.white-btn.action-btn DELIVERY SCHEDULE
            button.edit-subscription.white-btn.action-btn data-toggle="modal" data-target="#editSubscriptionModal-#{edge.node.id.split("gid://shopify/SubscriptionLine/")[1]}" Edit Subscription
            button.delivery-schedule.text-btn.action-btn data-toggle="modal" data-target="#delayOrderModal-#{subscription.node.id[/\d+/]}" DELAY NEXT ORDER
            = render 'delay_order_modal', subscription: subscription.node
            = render 'edit_subscription_modal', subscription: subscription.node, line_item: edge.node, product_image: product.images.first&.src
            = render 'swap_subscription_modal', subscription: subscription.node, line_item: edge.node
            = render 'upgrade_subscription_modal', subscription: subscription.node, line_item: edge.node
            = render 'cancel_subscription_modal', subscription: subscription.node, line_item: edge.node, lines_count: subscription.node.lines.edges.size
        .quantity-wrapper
          form action="#{action_subscription_contract_path(:update_quantity, subscription.node.id[/\d+/])}" method='post' data-remote=true enctype="multipart/form-data"
            .quantity-field
              div
                span.label.active-text Quantity:
                span.btn-wrapper
                  button.minus-quantity type="button"
                    svg fill="none" height="8" viewbox=("0 0 7 2") width="8" xmlns="http://www.w3.org/2000/svg"
                      path d=("M7 0H0V1.5H7V0Z") fill="#637381" /

                  input.quatity-val type="number" name="quantity" value="#{edge.node.quantity}"/
                  button.plus-quantity type="button"
                    svg fill="none" height="8" viewbox=("0 0 8 8") width="8" xmlns="http://www.w3.org/2000/svg"
                      path d=("M0 3.08V4.508H3.08V7.588H4.508V4.508H7.588V3.08H4.508V0H3.08V3.08H0Z") fill="#212B36" /
                  input.prev-quantity type="hidden" value="#{edge.node.quantity}"/
                span.update-quantity
                  input.hidden type="text" name="line_item_id" value="#{edge.node.id}"/
                  button type="submit" APPLY
              div
                div.chevron
                  svg fill="none" height="30" viewbox=("0 0 30 30") width="30" xmlns="http://www.w3.org/2000/svg"
                    circle cx="15" cy="15" r="14" stroke="#007EFF" stroke-width="2" /
                    path d=("M7.5 12L14.5 19L21.5 12") stroke="#007EFF" stroke-width="2" /
        .slide-down
          .item
            p start date
            p
              = DateTime.parse(subscription.node.created_at).strftime("%a, %B %e")
          .item
            p est. next delivery
            p
              = DateTime.parse(subscription.node.next_billing_date).strftime("%a, %B %e")
          .item
            p last card charge
            p -
          .item
            p quantity
            p
              = edge.node.quantity
      .delivery-address
        div
          p.text.active-text DELIVERY ADDRESS
          h3.active-text
            = subscription.node.delivery_method.address.address1
        div
          button.edit-address data-toggle="modal" data-target="#deliveryEditModal" EDIT
      = render 'edit_delivery_address_modal', subscription: subscription.node
    - line_products = subscription.node.lines.edges.map{|edge| edge.node.product_id[/\d+/]}
    - selling_plan_ids = subscription.node.lines.edges.map{|edge| edge.node.selling_plan_id}
    - selling_plan_id = selling_plan_ids.reject{|val| val.nil?}&.first
    / - selling_plan_id = "gid://shopify/SellingPlan/404848846"
    - campaigns = UpsellCampaign.joins(:upsell_campaign_group).where(upsell_campaign_groups: {status: :publish}).where("rule_customer = 't' AND rule_customer_value ->> 'sellingPlanId' = ?", selling_plan_id).select("product_offer AS product_offer, offer_title, button_text_accept, show_offer_title")
    - product_ids = []
    - campaigns.each do |campaign|
      - product_ids.push((campaign.product_offer.is_a? Array) ? campaign.product_offer.map{|a| a["product_id"][/\d+/]} : campaign.product_offer['product_id'][/\d+/])
    - product_ids = product_ids.flatten - line_products
    - upsell_products = product_ids.present? ? ShopifyAPI::Product.where(ids: product_ids.join(',')) : nil
    - if upsell_products.present?
      .carousal-container.preview-container
        h2.offerTitle
          - if campaigns.first.show_offer_title
            = campaigns.first.offer_title.present? ? campaigns.first.offer_title : "Hey there! There's is an offer for you!"
        .owl-carousel.owl-theme.account-carousel
          - upsell_products.each do |product|
            .preview-item
              .img.carousel-img
                - if product.images.first.present?
                  img alt="" height="100%" src=product.images.first&.src
              p.carousel-text
                = product.title
                - if product.title.size <= 38
                  br /
              .spinner
                .loader
              = form_tag action_subscription_contract_path(:add_product, subscription.node.id[/\d+/]), method: :post, :id => "form-#{product.id}", remote: true do
                .variants-wrapper
                  - product.variants.each_with_index do |variant, index|
                    label
                      - if index.zero?
                        input name="variant_id" type="radio" value="#{variant.id}" checked='checked'
                      - else
                        input name="variant_id" type="radio" value="#{variant.id}"
                      = "#{variant.title} (#{number_to_currency variant.price})"
                .btn-wrapper
                  button.btn-variant type="button"
                    = campaigns.first.button_text_accept.present? ? campaigns.first.button_text_accept : 'Add'
                .btn-wrapper
                  button type="submit" style=("display: none;")
                    = campaigns.first.button_text_accept.present? ? campaigns.first.button_text_accept : 'Add'
- elsif (params[:status].present? && params[:status] == 'active') || !params[:status].present?
  div.notification-banner
    p.Polaris-Heading No subscription have been found for your account
