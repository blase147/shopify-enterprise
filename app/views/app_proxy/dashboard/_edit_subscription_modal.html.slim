.Polaris-Modal id=("editSubscriptionModal-#{line_item.id.split("gid://shopify/SubscriptionLine/")[1]}") style="display: none"
  .Polaris-Modal-Dialog__Container data-polaris-layer="true" data-polaris-overlay="true"
    .Polaris-Modal-Dialog aria-labelledby="Polarismodal-header20" role="dialog" tabindex="-1"
      .Polaris-Modal-Dialog__Modal
        .Polaris-Modal__BodyWrapper
          .Polaris-Modal__Body.Polaris-Scrollable.Polaris-Scrollable--vertical.edit-subscription-modal data-polaris-scrollable="true"
            .header
              div
                h2 Edit Subscription
              div.close aria-hidden="true" tabindex="-1" data-action='close' data-dismiss="modal"
                svg fill="none" height="20" viewbox=("0 0 18 20") width="18" xmlns="http://www.w3.org/2000/svg"
                  path d=("M0 19.9998H2.212L8.484 11.0398L14.756 19.9998H17.052L9.688 9.58378L16.408 0.175781H14.196L8.568 8.23978L2.856 0.175781H0.672L7.448 9.58378L0 19.9998Z") fill="#DDDDDD" /

            .subscription-details
              .img
                img src=product_image
              .title
                h2
                  = line_item.title
                h3
                  = "#{number_to_currency line_item.current_price.amount} / #{subscription.billing_policy.interval_count} #{subscription.billing_policy.interval}"
              .delivery-charge
                div
                  h3 #{@translation.edit_subscription_popup_est_next_delivery.present? ? @translation.edit_subscription_popup_est_next_delivery : 'est. next delivery'}
                  h4
                    = (subscription.next_billing_date.to_date + 4.days).strftime("%a, %B %e")
                div
                  h3 #{@translation.edit_subscription_popup_next_card_charge.present? ? @translation.edit_subscription_popup_next_card_charge : 'NEXt card charge'}
                  h4
                    = DateTime.parse(subscription.next_billing_date).strftime("%a, %B %e")
              .btn-wrapper
                - selling_plan_group = SellingPlanGroup.joins(:selling_plans).where(selling_plans: {shopify_id: selling_plan_id}).first
                - previous_interval = subscription.billing_policy.interval.downcase
                - disable_upgrade = selling_plan_group.blank? || selling_plan_group.selling_plans.count < 1
                button.modal_btn class=('upgrade-subscription' + (disable_upgrade ? ' light' : '')) disabled=(disable_upgrade) type="button" aria-hidden="true" tabindex="-1" data-action='close' data-toggle="modal" data-target="#upgrade-#{line_item.id.split("gid://shopify/SubscriptionLine/")[1]}" #{@translation.edit_subscription_popup_upgrade_subscription.present? ? @translation.edit_subscription_popup_upgrade_subscription : 'UPGRADE SUBSCRIPTION'}

                button class="pause-subscription" data-path="/pause" data-contractid="#{subscription&.id[/\d+/] rescue nil }" Pause Subscription

                - disable_swap = controller_name == 'dashboard' && !current_setting.customer_allowed?('swap_product')
                button.modal_btn class=('swap-subscription' + (disable_swap ? ' light' : '')) disabled=(disable_swap) type="button" aria-hidden="true" tabindex="-1" data-action='close' data-toggle="modal" data-target="#swap-#{line_item.id.split("gid://shopify/SubscriptionLine/")[1]}" #{@translation.edit_subscription_popup_swap_subscription.present? ? @translation.edit_subscription_popup_swap_subscription : 'SWAP SUBSCRIPTION'}
                // button.downgrade-subscription.light type="button" DOWNGRADE SUBSCRIPTION
                //button.ask-questions.light type="button" #{@translation.edit_subscription_popup_ask_a_question.present? ? @translation.edit_subscription_popup_ask_a_question : 'ASK A QUESTION'}
                - allow_cancel = false
                - if selling_plan
                  - allow_cancel = ((DateTime.parse(subscription.created_at) + (selling_plan.min_fullfilment-1).send(selling_plan.interval_type.downcase.to_sym)) < Time.now) rescue false
                - if (defined?(admin_action) && setting.admin_allowed?('subscription_cancellation')) || (!defined?(admin_action) && setting.customer_allowed?('subscription_cancellation') && allow_cancel)
                  button.cancel-subscription-button data-id="#{subscription&.id[/\d+/] rescue nil }" data-line-id="#{ line_item&.id}" data-variant-id="#{line_item&.variant_id}" #{@translation.edit_subscription_popup_ask_a_question.present? ? @translation.edit_subscription_popup_ask_a_question : 'CANCEL SUBSCRIPTION'}
                  
            / = p_button text: 'Cancel Subscription', data: { url: action_subscription_path(:cancel), confirm_text: 'Are you sure you want to Cancel your Subscription?' }

  .Polaris-Backdrop

javascript: 
  $('.cancel-subscription-button').on('click', function(e){
    e.preventDefault();
    id = $(this).data('id');
    line_id = $(this).data('line-id');
    variant_id = $(this).data('variant-id');
    url = "/a/chargezen_production/subscriptions/"+id+"/remove_line?line_id="+line_id+"&lines_count=1&quantity=1&variant_id="+variant_id+"&action_by=customer";
    $(this).text('Updating..');
    $.ajax({
      url: url,
      type: 'POST',
      contentType: 'application/json',
      success: function(response) {
        Swal.fire({
          icon: 'success',
          title: "Success! Reloading Page",
          showConfirmButton: false
        })
        location.reload();
      },
      error: function(response) {

      }
    });
  });

  $('.pause-subscription').on('click', function(e){
    e.preventDefault();
    action = $(this).data('path');
    contract_id = $(this).data('contractid');
    var myDate=new Date();
    myDate.setDate(myDate.getDate()+1);
    // format a date
    var date = myDate.getDate() + '/' + ("0" + (myDate.getMonth() + 1)).slice(-2) + '/' + myDate.getFullYear();
    url = "/a/chargezen_production/subscriptions/" + contract_id + action + "?billing_date=" + date+"&action_by=customer"
    $(this).text('Updating..');
    $.ajax({
      url: url,
      type: 'POST',
      contentType: 'application/json',
      success: function(response) {
        Swal.fire({
          icon: 'success',
          title: "Success! Reloading Page",
          showConfirmButton: false
        })
        location.reload();
      },
      error: function(response) {

      }
    });
  });