/ link href="/node_modules/owl.carousel/dist/assets/owl.carousel.min.css" rel="stylesheet" /

.Polaris-Frame data-has-navigation="true" data-polaris-layer="true"
  div
    #AppFrameNav
      = render 'app_proxy/shared/dashboard_nav'

  - if @subscription_contracts.empty?
    div.content-wrapper
      div
        p.Polaris-DisplayText.Polaris-DisplayText--sizeMedium YOUR SUBSCRIPTION
      div.notification-banner
        p.Polaris-Heading No subscription have been found for your account
  /   .Polaris-Frame__ContextualSaveBar.Polaris-Frame-CSSAnimation--startFade
  /   main#AppFrameMain.Polaris-Frame__Main data-has-global-ribbon="false"
  /     a#AppFrameMainContent tabindex="-1"
  /     .Polaris-Frame__Content
  /       .Polaris-Page
  /         .Polaris-Page-Header.Polaris-Page-Header--isSingleRow.Polaris-Page-Header--noBreadcrumbs.Polaris-Page-Header--mediumTitle
  /           .Polaris-Page-Header__MainContent
  /             .Polaris-Page-Header__TitleActionMenuWrapper
  /               .Polaris-Page-Header__TitleWrapper
  /                 div
  /                   .Polaris-Header-Title__TitleAndSubtitleWrapper
  /                     .Polaris-Header-Title
  /                       h1.Polaris-DisplayText.Polaris-DisplayText--sizeLarge
  /                         span.Polaris-TextStyle--variationStrong Account Overview
  /                       .Polaris-Layout__AnnotationDescription
  /                         p Summary of your account

  /         .Polaris-Page__Content.mt-30
  /           .Polaris-Layout
  /             .Polaris-Layout__AnnotatedSection
  /               .Polaris-Layout__AnnotationWrapper
  /                 .Polaris-Layout__AnnotationContent
  /                   .Polaris-Card
  /                     .Polaris-Banner.Polaris-Banner--withinContentContainer
  /                       .Polaris-Banner__Ribbon
  /                         span.Polaris-Icon
  /                           = icon_tag 'info'
  /                       .Polaris-Banner__ContentWrapper
  /                         #PolarisBanner8Heading.Polaris-Banner__Heading
  /                           p Orders are typically delivered within 5-7 business days. In some cases deliveries may take longer due to extra safety precautions in our fulfillment center and carrier transportation delays.
  /                           p If you need your subscription delivered by a specific date, we suggest adjusting your processing date accordingly

  /                   .Polaris-Card
  /                     .Polaris-Banner.Polaris-Banner--withinContentContainer
  /                       .Polaris-Banner__Ribbon
  /                         span.Polaris-Icon
  /                           = icon_tag 'info'
  /                       .Polaris-Banner__ContentWrapper
  /                         #PolarisBanner8Heading.Polaris-Banner__Heading
  /                           p.Polaris-Heading You have no upcoming deliveries
  /                   .Polaris-Card
  /                     .Polaris-Banner.Polaris-Banner--withinContentContainer
  /                       .Polaris-Banner__Ribbon
  /                         span.Polaris-Icon
  /                           = icon_tag 'info'
  /                       .Polaris-Banner__ContentWrapper

  /                         #PolarisBanner8Heading.Polaris-Banner__Heading
  /                           p.Polaris-Heading Your Subscriptions
  /                         #PolarisBanner8Content.Polaris-Banner__Content
  /                           p Within your subscriptions you can easily edit your flavours, change the delivery date, pause or even cancel your subscription
  /                           .Polaris-Banner__Actions
  /                             .Polaris-ButtonGroup
  /                               .Polaris-ButtonGroup__Item
  /                                 .Polaris-Banner__PrimaryAction
  /                                   button.Polaris-Button.Polaris-Button--outline type="button"
  /                                     span.Polaris-Button__Content
  /                                       span.Polaris-Button__Text No active subscription found
  /                               .Polaris-ButtonGroup__Item&nbsp;Content
  /                                       span.Polaris-Button__Text Subcribe Now
  /                   .Polaris-Card
  /                     .Polaris-Card__Header
  /                       .Polaris-Stack.Polaris-Stack--alignmentBaseline
  /                         .Polaris-Stack__Item.Polaris-Stack__Item--fill
  /                           h2.Polaris-Heading Refer-a-friend & Save
  /                         .Polaris-Stack__Item
  /                           .Polaris-ButtonGroup
  /                             .Polaris-ButtonGroup__Item.Polaris-ButtonGroup__Item--plain
  /                               button.Polaris-Button.Polaris-Button--primary type="button"
  /                                 span.Polaris-Button__Content
  /                                   span.Polaris-Button__Text Subcription Guide
  /                     .Polaris-Card__Section

  - else
    div.content-wrapper
      - if !params[:status].present? || (params[:status].present? && params[:status] == 'active')
        div.display-text
          p
            span MY &nbsp;
            span.active ACTIVE &nbsp;
            span SUBSCRIPTION
          a.add_weekly_box href="#"
            span Add one more weekly box
            svg fill="none" height="12" viewbox=("0 0 20 12") width="20" xmlns="http://www.w3.org/2000/svg"
              path d=("M14.5148 0.514771L13.6239 1.40567L17.5882 5.37004H0V6.62998H17.5882L13.6239 10.5943L14.5148 11.4852L20 5.99996L14.5148 0.514771Z") fill="black" /
        - if @active_subscriptions.present? && (params[:status].present? ? params[:status] == 'active' : true)
          - @active_subscriptions.each do |subscription|
            - billing_policy = subscription.node.billing_policy
            .subscription-contract-products
              - subscription.node.lines.edges.each_with_index do |edge, index|
                - product = ShopifyAPI::Product.find(edge.node.product_id[/\d+/])
                .grid
                  .grid-item
                    .img
                      img src=product.images.first&.src alt=""
                    p.text
                      = product.title
                    p.text
                      = "#{number_to_currency edge.node.current_price.amount} / #{billing_policy.interval_count} #{billing_policy.interval}"
                  .grid-item
                    h4 NEXT CARD CHARGE
                    p.text.right
                      = DateTime.parse(subscription.node.next_billing_date).strftime("%a, %B %e")
                    p.text.right
                      = number_to_currency (edge.node.current_price.amount.to_f * edge.node.quantity)
                  .grid-item
                    button.delivery-schedule.white-btn data-toggle="modal" data-target="#delayOrderModal-#{subscription.node.id[/\d+/]}" DELAY NEXT ORDER
                    = render 'delay_order_modal', subscription: subscription.node
                    = link_to "/a/chargezen_production/dashboard/upcoming?customer_id=#{params[:customer_id]}" do
                      button.white-btn DELIVERY SCHEDULE
                    button.edit-subscription.text-btn data-toggle="modal" data-target="#editSubscriptionModal-#{edge.node.id.split("gid://shopify/SubscriptionLine/")[1]}" Edit Subscription
                    = render 'edit_subscription_modal', subscription: subscription.node, line_item: edge.node, product_image: product.images.first&.src
                    = render 'swap_subscription_modal', subscription: subscription.node, line_item: edge.node
                    = render 'upgrade_subscription_modal', subscription: subscription.node, line_item: edge.node
                .quantity-wrapper
                  form action="#{action_subscription_contract_path(:update_quantity, subscription.node.id[/\d+/])}" method='post' data-remote=true enctype="multipart/form-data"
                    .quantity-field
                      div
                        span.label Quantity:
                        span.btn-wrapper
                          button.minus-quantity type="button"
                            svg fill="none" height="8" viewbox=("0 0 7 2") width="8" xmlns="http://www.w3.org/2000/svg"
                              path d=("M7 0H0V1.5H7V0Z") fill="#637381" /

                          input.quatity-val type="number" name="quantity" value="#{edge.node.quantity}"/
                          button.plus-quantity type="button"
                            svg fill="none" height="8" viewbox=("0 0 8 8") width="8" xmlns="http://www.w3.org/2000/svg"
                              path d=("M0 3.08V4.508H3.08V7.588H4.508V4.508H7.588V3.08H4.508V0H3.08V3.08H0Z") fill="#212B36" /
                          input.prev-quantity type="hidden" value="#{edge.node.quantity}"/
                        span.update-quantity
                          input.hidden type="text" name="line_item_id" value="#{edge.node.id}"/
                          button type="submit" APPLY
                      - if subscription.node.lines.edges.size == (index + 1)
                        div
                          div.chevron
                            svg fill="none" height="30" viewbox=("0 0 30 30") width="30" xmlns="http://www.w3.org/2000/svg"
                              circle cx="15" cy="15" r="14" stroke="#007EFF" stroke-width="2" /
                              path d=("M7.5 12L14.5 19L21.5 12") stroke="#007EFF" stroke-width="2" /
                .slide-down
                  .item
                    p start date
                    p
                      = DateTime.parse(subscription.node.created_at).strftime("%a, %B %e")
                  .item
                    p est. next delivery
                    p
                      = DateTime.parse(subscription.node.next_billing_date).strftime("%a, %B %e")
                  .item
                    p last card charge
                    p -
                  .item
                    p quantity
                    p
                      = edge.node.quantity
              .delivery-address
                div
                  p.text DELIVERY ADDRESS
                  h3
                    = subscription.node.delivery_method.address.address1
                div
                  button.edit-address data-toggle="modal" data-target="#deliveryEditModal" EDIT
              = render 'edit_delivery_address_modal', subscription: subscription.node
              = render 'cancel_subscription_modal', subscription: subscription.node
            - line_products = subscription.node.lines.edges.map{|edge| edge.node.product_id[/\d+/]}
            - selling_plan_ids = subscription.node.lines.edges.map{|edge| edge.node.selling_plan_id}
            - selling_plan_id = selling_plan_ids.reject{|val| val.nil?}&.first
            / - selling_plan_id = 'gid://shopify/SellingPlan/393543886'
            - campaigns = UpsellCampaign.joins(:upsell_campaign_group).where(upsell_campaign_groups: {status: :publish}).where("rule_customer = 't' AND rule_customer_value ->> 'sellingPlanId' = ?", selling_plan_id).select("product_offer AS product_offer, offer_title, button_text_accept, show_offer_title")
            - product_ids = []
            - campaigns.each do |campaign|
              - product_ids.push((campaign.product_offer.is_a? Array) ? campaign.product_offer.map{|a| a["product_id"][/\d+/]} : campaign.product_offer['product_id'][/\d+/])
            - product_ids = product_ids.flatten - line_products
            - upsell_products = product_ids.present? ? ShopifyAPI::Product.where(ids: product_ids.join(',')) : nil
            - if upsell_products.present?
              .carousal-container.preview-container
                h2.offerTitle
                  - if campaigns.first.show_offer_title
                    = campaigns.first.offer_title.present? ? campaigns.first.offer_title : "Hey there! There's is an offer for you!"
                .owl-carousel.owl-theme
                  - upsell_products.each do |product|
                    .preview-item
                      .img
                        - if product.images.first.present?
                          img alt="" height="100%" src=product.images.first&.src
                      p
                        = product.title
                        - if product.title.size <= 38
                          br /
                      .spinner
                        .loader
                      = form_tag action_subscription_contract_path(:add_product, subscription.node.id[/\d+/]), method: :post, :id => "form-#{product.id}", remote: true do
                        .variants-wrapper
                          - product.variants.each_with_index do |variant, index|
                            label
                              - if index.zero?
                                input name="variant_id" type="radio" value="#{variant.id}" checked='checked'
                              - else
                                input name="variant_id" type="radio" value="#{variant.id}"
                              = "#{variant.title} (#{number_to_currency variant.price})"
                        .btn-wrapper
                          button.btn-variant type="button"
                            = campaigns.first.button_text_accept.present? ? campaigns.first.button_text_accept : 'Add'
                        .btn-wrapper
                          button type="submit" style=("display: none;")
                            = campaigns.first.button_text_accept.present? ? campaigns.first.button_text_accept : 'Add'
        - elsif (params[:status].present? && params[:status] == 'active') || !params[:status].present?
          div.notification-banner
            p.Polaris-Heading No subscription have been found for your account
      - if !params[:status].present? || (params[:status].present? && params[:status] == 'cancelled')
        div.display-text
          p
            span MY &nbsp;
            span.canceled CANCELLED &nbsp;
            span SUBSCRIPTION
        - if @cancelled_subscriptions.present? && (params[:status].present? ? params[:status] == 'cancelled' : true)
          - @cancelled_subscriptions.each do |subscription|
            - billing_policy = subscription.node.billing_policy
            - subscription.node.lines.edges.each do |edge|
              - product = ShopifyAPI::Product.find(edge.node.product_id[/\d+/])
              .subscription-contract-products
                .grid
                  .grid-item
                    .img
                      img src=product.images.first&.src alt=""
                    p.text
                      = product.title
                    p.text
                      = "#{number_to_currency edge.node.current_price.amount} / #{billing_policy.interval_count} #{billing_policy.interval}"
                  .grid-item
                    h4 Start Date
                    p.text.right
                      = DateTime.parse(subscription.node.created_at).strftime("%a, %B %e")
                    h4 Quantity
                    p.text.right
                      = edge.node.quantity
                    = link_to action_subscription_contract_path(:resume, subscription.node.id[/\d+/]), remote: true, method: :post do
                      button.text-btn RE-ACTIVATE
        - elsif (params[:status].present? && params[:status] == 'cancelled') || !params[:status].present?
          div.notification-banner
            p.Polaris-Heading No cancelled subscription have been found for your account
