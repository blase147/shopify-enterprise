.subscription-contract-products
  - product = ShopifyAPI::Product.find(subscription.import_data['product_id'])
  - selling_plan = SellingPlan.find(subscription.selling_plan_id) rescue nil
  - selling_plan_id = selling_plan.shopify_id rescue ''
  - box_campaign = BuildABoxCampaign.joins(:build_a_box_campaign_group).where(build_a_box_campaign_groups: { shop_id: @current_shop.id, location: 'customer_portal' }).where("'#{selling_plan_id[/\d+/]}' = ANY (selling_plan_ids)").first rescue nil
  .grid
    .grid-item
      .img.account-img
        img src=product.images.first&.src alt=""
      p.text.active-text
        = product.title
      p.text.active-text
        = "#{number_to_currency(((subscription.api_data['items']['data'][0]['price']['unit_amount']/100) rescue 0))} / #{subscription.api_data['items']['data'][0]['price']['recurring']['interval_count']} #{subscription.api_data['items']['data'][0]['price']['recurring']['interval']}"
      p.text.active-text
        = selling_plan.name rescue ''
    .grid-item
      h4 NEXT CARD CHARGE
      p.text.right.active-text
        = Time.at(subscription.api_data['billing_cycle_anchor']).strftime("%a, %B %e")
      p.text.right.active-text
        = number_to_currency((subscription.api_data['items']['data'][0]['price']['unit_amount']/100 rescue 0))
    .grid-item
      - (@setting.active_subscription_btn_seq || ['update_choices', 'delivery_schedule', 'swap_subscription', 'delay_next_order', 'edit_subscription']).each do |btn|
        - case btn
          - when 'update_choices'
            - if false # box_campaign && box_campaign_display(box_campaign, selling_plan_id)
              = link_to "/a/chargezen_production/dashboard/build_a_box?&build_a_box_campaign_id=#{box_campaign.id}&customer_id=#{params[:customer_id]}&subscription_id=#{subscription.id}&stripe_subscription=true&active_subscriptions_count=#{@active_subscriptions.count}&selling_plan_id=#{selling_plan_id[/\d+/]}" do
                button.white-btn.action-btn UPDATE CHOICES
          - when 'delivery_schedule'
            - if @setting.customer_allowed?('navigation_delivery')
              = link_to "/a/chargezen_production/dashboard/upcoming?customer_id=#{params[:customer_id]}&subscription_id=#{subscription.id}&line_id=#{subscription.id}&active_subscriptions_count=#{@active_subscriptions.count}" do
                button.white-btn.action-btn #{@translation.home_tab_delivery_schedule_btn.present? ? @translation.home_tab_delivery_schedule_btn : 'DELIVERY SCHEDULE'}
          - when 'swap_subscription'
            - if @setting.customer_allowed?('swap_product')
              button.white-btn.action-btn type="button" aria-hidden="true" tabindex="-1" data-action='close' data-toggle="modal" data-target="#swap-#{subscription.id}" SWAP SUBSCRIPTION
          - when 'edit_subscription'
            button.edit-subscription.white-btn.action-btn data-toggle="modal" data-target="#editSubscriptionModal-#{subscription.id}" #{@translation.home_tab_edit_subscription_btn.present? ? @translation.home_tab_edit_subscription_btn : 'Edit Subscription'}
          - when 'delay_next_order'
            - if @setting.customer_allowed?('frequency')
              button.delivery-schedule.white-btn.action-btn data-toggle="modal" data-target="#delayOrderModal-#{subscription.id}" #{@translation.home_tab_delay_next_order_btn.present? ? @translation.home_tab_delay_next_order_btn : 'DELAY NEXT ORDER'}
      / = render 'delay_order_modal', subscription: subscription.node, next_billing_date: next_billing_date
      = render 'stripe_edit_subscription_modal', subscription: subscription, product: product, setting: @setting
      - if @setting.customer_allowed?('swap_product')
        = render 'stripe_swap_subscription_modal', subscription: subscription, product: product
        / = render 'swap_subscription_modal', subscription: subscription, line_item: edge.node
      / = render 'upgrade_subscription_modal', subscription: subscription, line_item: edge.node, selling_plan_id: selling_plan_id, product: product
      = render 'stripe_cancel_subscription_modal', subscription: subscription, product: product
  - if @setting.customer_allowed?('upcoming_quantity')
    .quantity-wrapper
      form action="#{action_subscription_contract_path(:update_quantity, subscription.id)}" method='post' data-remote=true enctype="multipart/form-data"
        .quantity-field
          div
            span.label.active-text #{@translation.home_tab_quantity.present? ? @translation.home_tab_quantity : 'Quantity'}:
            span.btn-wrapper
              button.minus-quantity type="button"
                svg fill="none" height="8" viewbox=("0 0 7 2") width="8" xmlns="http://www.w3.org/2000/svg"
                  path d=("M7 0H0V1.5H7V0Z") fill="#637381" /

              input.quatity-val type="number" name="quantity" value="#{subscription.import_data['quantity']}"/
              button.plus-quantity type="button"
                svg fill="none" height="8" viewbox=("0 0 8 8") width="8" xmlns="http://www.w3.org/2000/svg"
                  path d=("M0 3.08V4.508H3.08V7.588H4.508V4.508H7.588V3.08H4.508V0H3.08V3.08H0Z") fill="#212B36" /
              input.prev-quantity type="hidden" value="#{subscription.import_data['quantity']}"/
            span.update-quantity
              input.hidden type="text" name="line_item_id" value="#{subscription.id}"/
              button type="submit" APPLY
          div
            div.chevron
              svg fill="none" height="30" viewbox=("0 0 30 30") width="30" xmlns="http://www.w3.org/2000/svg"
                circle cx="15" cy="15" r="14" stroke="#007EFF" stroke-width="2" /
                path d=("M7.5 12L14.5 19L21.5 12") stroke="#007EFF" stroke-width="2" /
  - else
    .quantity-wrapper
      form action="" method='post' data-remote=true enctype="multipart/form-data"
        .quantity-field
          div
            span.label.active-text #{@translation.home_tab_quantity.present? ? @translation.home_tab_quantity : 'Quantity'}:
            span.label.active-text= subscription.import_data['quantity']
  .slide-down
    .item
      p #{@translation.home_tab_start_date.present? ? @translation.home_tab_start_date : 'start date'}
      p
        = subscription.created_at.strftime("%a, %B %e")
    .item
      p #{@translation.home_tab_est_next_delivery.present? ? @translation.home_tab_est_next_delivery : 'est. next delivery'}
      p
        = (Time.at(subscription.api_data['billing_cycle_anchor']) + 4.days).strftime("%a, %B %e")
    .item
      p #{@translation.home_tab_last_card_charge.present? ? @translation.home_tab_last_card_charge : 'last card charge'}
      p -
    .item
      p #{@translation.home_tab_quantity.present? ? @translation.home_tab_quantity : 'quantity'}
      p
        = subscription.import_data['quantity']
  - if @setting.customer_allowed?('shiping_address')
    .delivery-address
      div
        p.text.active-text #{@translation.home_tab_delivery_address.present? ? @translation.home_tab_delivery_address : 'DELIVERY ADDRESS'}
        h3.active-text
          = subscription.import_data['address1']
        div.weekly-account
        a.add_weekly_box.promo-tag-II href="#"
          - if @setting.promo_tagline2_content.present?
            span #{@setting.promo_tagline2_content}
          - elsif @translation.home_tab_apply_discount.present?
            span #{@translation.home_tab_apply_discount}
          - else
            'Apply Discount'
          svg fill="none" height="12" viewbox=("0 0 20 12") width="20" xmlns="http://www.w3.org/2000/svg"
            path d=("M14.5148 0.514771L13.6239 1.40567L17.5882 5.37004H0V6.62998H17.5882L13.6239 10.5943L14.5148 11.4852L20 5.99996L14.5148 0.514771Z") fill="black" /
      div
        button.edit-address data-toggle="modal" data-target="#deliveryEditModal" #{@translation.home_tab_edit_btn.present? ? @translation.home_tab_edit_btn : 'EDIT'}
    / = render 'edit_delivery_address_modal', subscription: subscription.node
